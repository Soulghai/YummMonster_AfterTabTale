apply plugin: 'android'

psdkSubProjects.each {
    proj ->
    evaluationDependsOn(":${proj.name}")
}

def aarsList = []

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {
    compileSdkVersion compileSdkVer.toInteger()
    buildToolsVersion buildToolsVer

    dexOptions {
        javaMaxHeapSize "4g"
    }


    // making the output apk name on "release.apk"
    archivesBaseName = "app"

    defaultConfig {

        minSdkVersion minSdkVer
        multiDexEnabled true
        applicationId = bundleIdentifier
    }

    lintOptions {
          checkReleaseBuilds false
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    File signFile = rootProject.file('keystore.properties')
    if (signFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signFile))
        signingConfigs {
            release {
                storeFile rootProject.file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
        debug {
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }

}

android.applicationVariants.all { variant ->
    println "*********" + variant.description + "**********";
    if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
		//def outputFileName = "../../${rootProject.productName}_${rootProject.store}_"+getDate()+".apk"
		def outputFileName = "../../${rootProject.productName}_${rootProject.store}.apk"
                output.outputFile = file(outputFileName)
                println output.outputFile
        }
    }
}

dependencies {
    psdkSubProjects.each {
      psp -> compile psp
        try {
            psp.configurations.compile.each {
                file ->
                    println "${psp.name} excluding dependency from app  ${file.name}"
                    if (psp.hasProperty('excludeJarsList')) {
                        excludeJarsList.add(file.name)
                    }
            }
        }
        catch (Exception){}
    }
    compile 'com.android.support:multidex:1.0.0'
    compile "com.google.android.gms:play-services-ads:$googlePlayServicesPSDKVer"
    compile "com.google.android.gms:play-services-base:$googlePlayServicesPSDKVer"
    compile "com.google.android.gms:play-services-gcm:$googlePlayServicesPSDKVer"
    if (rootProject.googlePlayGames == "true") {
      compile "com.google.android.gms:play-services-games:$googlePlayServicesPSDKVer"
      compile "com.google.android.gms:play-services-nearby:$googlePlayServicesPSDKVer"
    }

    // Compiling local AARs from libs
    fileTree(dir: 'libs', include: '*.aar' , exclude: excludeJarsList).each { File file ->
	def aarName = file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name }
        println "aar: " + aarName
    	dependencies.add("compile", [name: aarName, ext: 'aar'])
	aarsList.add(aarName)
    }

     // Subprojects
     // compiling dependent projects without projects that was already compiled as AARs from libs
	def subprojectToCompile = (rootProject.subprojects
					- project(":$productName")
					- aarsList.intersect(rootProject.subprojects.collect{project -> project.name}).collect { project(":$it")}
					- excludedProjects
				)
      
	
	subprojectToCompile.each {
		print "Compiling subproject: " + it + '\n'
 		compile it
     }

    println "excluded jar list:" + excludeJarsList
    compile fileTree(dir: 'libs', include: '*.jar', exclude: excludeJarsList)
}


def injectMultidexSupportToAndroidManifest() {
    println "putting multidex android:name into application node in AndroidManifest.xml"
    def manifestFile =  android.sourceSets.main.manifest.getSrcFile()
    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def manifest = new XmlParser(false, true).parse(manifestFile)

    /// Injecting multi dex support
    manifest.application[0].attributes()[ns.name] = 'android.support.multidex.MultiDexApplication'

    // injecting android theme
    manifest.application[0].attributes()[ns.theme] = '@android:style/Theme.NoTitleBar.Fullscreen'

    def xmlOutput = new StringWriter()
    def xmlNodePrinter = new XmlNodePrinter(new PrintWriter(xmlOutput))
    xmlNodePrinter.print(manifest)
    //println xmlOutput.toString()
    manifestFile.write(xmlOutput.toString(), 'UTF-8')
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

def changingMainActivitySingleTaskToSingleTopInAndroidManifest() {
    println "Changing main activity launch mode to SingleTops instead of SingleTask and clearing tasks cache in AndroidManifest.xml"
    def manifestFile =  android.sourceSets.main.manifest.getSrcFile()
    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def manifest = new XmlParser(false, true).parse(manifestFile)
    manifest.application[0].activity.each{  ac ->
                ac.attributes().each {
                        if (it.key == ns.launchMode && it.value == 'singleTask') {
                                it.value = 'singleTop';
                }
           }
        }
    def xmlOutput = new StringWriter()
    def xmlNodePrinter = new XmlNodePrinter(new PrintWriter(xmlOutput))
    xmlNodePrinter.print(manifest)
    //println xmlOutput.toString()
    manifestFile.write(xmlOutput.toString(), 'UTF-8')
}


task updateManifestTask {
  injectMultidexSupportToAndroidManifest()
  changingMainActivitySingleTaskToSingleTopInAndroidManifest()
}

def IsManifestHasGoogleGcm() {
    println "Checking if AndroidManifest.xml has Google Gcm"
    def manifestFile =  android.sourceSets.main.manifest.getSrcFile()
    def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def manifest = new XmlParser(false, true).parse(manifestFile)
    def rc = false
    manifest.application[0].receiver.each{  ac ->
                ac.attributes().each {
                        if (it.key == ns.name && it.value == 'com.google.android.gms.gcm.GcmReceiver') {
				println "got com.google.android.gms.gcm.GcmReceiver !!!"
                                rc=true
                }
           }
        }
   return rc
}

