// Top-level build file where you can add configuration options common to all sub-projects/modules.
ext.psdkDebug = false
ext.excludeJarsList = ['android-support-v*.jar','google-play-services.jar','google-play-services_lib.aar','play-services-ads-*.aar','play-services-base-*.aar','play-services-gcm-*.aar']

// This map must hold full keys of psdk projects.
ext.psdkProjectArtifact = [
        "publishingsdkcore":"publishingsdkcore.jar",
        "configurationfetcher":"configurationfetcher.jar",
        "rewardedads":"rewardedads.jar",
        "monetization":"monetization.jar",
        "banners":"banners.jar",
        "psdkanalytics":"psdkanalytics.jar",
        "gameleveldata":"gameleveldata.jar",
        "runtimeconfig":"runtimeconfig.jar",
        "psdkyoutube":"psdkyoutube.jar",
        "psdkgoogleanalytics":"psdkgoogleanalytics.jar",
        "splash":"splash.jar",
        "psdkappsflyer":"psdkappsflyer.jar",
        "psdkunity":"psdkunity.jar",
        "rewardedadstestapp":"",
        "bannerstestapp":"",
        "startappadsproviders":"startappadsproviders.jar",
        "millennialadsproviders":"millennialadsproviders.jar",
        "inmobiadsproviders":"inmobiadsproviders.jar",
        "applovinadsproviders":"applovinadsproviders.jar",
        "inmobicustomadaptor":"inmobicustomadaptor.jar",
        "applovincustomadaptor":"applovincustomadaptor.jar",
        "startappcustomadaptor":"startappcustomadaptor.jar",
        "millennialcustomadaptor":"millennialcustomadaptor.jar",
        "publishingtestapp":"",
        "ttflurryanalytics":"ttflurryanalytics.jar",
        "ttanalytics":"ttanalytics.jar",
        "deltadnaanalytics":"deltadnaanalytics.jar",
        "analyticstestapp":"",
        "ttunity":"ttunity.jar",
        "psdkcrashtool":"psdkcrashtool.jar"
]

ext.psdkSubProjects = []
for (psdkSubProj in rootProject.getChildProjects().keySet().intersect( psdkProjectArtifact.keySet())) {
    psdkSubProjects.add(project(":${psdkSubProj}"))
}

if (psdkSubProjects.size() > 0 && project.hasProperty('psdkPublishingPath')) {
    println "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
    println "Using psdkPublishingPath=" + psdkPublishingPath
    println "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
}

psdkSubProjects.each{ proj ->
    if (psdkProjectArtifact.containsKey(proj.name)) {
        println proj.name + "\texcluding: " + psdkProjectArtifact[proj.name]
        ext.excludeJarsList.add(psdkProjectArtifact[proj.name])
    }
}

def nonePsdkSubProjects = subprojects - project(":$productName") - psdkSubProjects;
print "non psdk subprojects" + nonePsdkSubProjects

//configure(subprojects - project(":$productName") - psdkSubProjects) { //or ':Android:AndroidApps' not sure


ext.excludedProjects = subprojects.findAll {
    (it.name.startsWith("play-services-base")
        || it.name.startsWith("play-services-ads")
        || it.name.startsWith("play-services-gcm")
        || it.name.startsWith("play-services-games"))
}

configure(subprojects - project(":$productName")- psdkSubProjects-excludedProjects) { //or ':Android:AndroidApps' not sure
    println "applying android-library plugin to $project"
    apply plugin: 'android-library'

    repositories {
        mavenCentral()
     }


	if (! rootProject.getChildProjects().containsKey("unity-android-resources") || project != project(":unity-android-resources")) {
    		dependencies {
			    println project.name + " adding $productName/libs jars to classpath"
    			compile "com.google.android.gms:play-services-base:$googlePlayServicesPSDKVer"
    			compile fileTree(include: '*.jar', dir: 'libs', exclude: 'android-support-v*.jar')
			    compile  fileTree(dir: "$rootProject.projectDir/$productName/libs" , include: '*.jar', exclude: excludeJarsList )
    		}
	}


   android {

    publishNonDefault true

    compileSdkVersion compileSdkVer.toInteger()
    buildToolsVersion buildToolsVer

    defaultConfig {
        minSdkVersion minSdkVer
    }


   lintOptions {
          checkReleaseBuilds false
   }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            //jniLibs.srcDirs = ['libs', "$rootProject.projectDir/$productName/libs"]
            jniLibs.srcDirs = ['libs']
        }

		// changing unity-android-resources project packageName
		if (rootProject.getChildProjects().containsKey("unity-android-resources") && project == project(":unity-android-resources")) {
        	def manifestOutFile = android.sourceSets.main.manifest.getSrcFile()
        	def newFileContents = manifestOutFile.getText('UTF-8').replace("\"${bundleIdentifier}\"", "\"${bundleIdentifier}.unityAndroidResources\"")
        	manifestOutFile.write(newFileContents, 'UTF-8')
		}

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

  }
}

if (rootProject.getChildProjects().containsKey("unity-android-resources")) {
    project(":unity-android-resources") {
        def manifestOutFile = android.sourceSets.main.manifest.getSrcFile()
        def newFileContents = manifestOutFile.getText('UTF-8').replace("\"${bundleIdentifier}\"", "\"${bundleIdentifier}.unityAndroidResources\"")
        manifestOutFile.write(newFileContents, 'UTF-8')
    }
}


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.+'
    }

}

if (psdkDebug) {
    allprojects {
        repositories {
            mavenCentral()
            jcenter()
            flatDir {
                name 'psdkThirdPartyRepository'
                dirs("$psdkPublishingPath/ThirdParty/banners/android/ext/libs",
                        "$psdkPublishingPath/ThirdParty/banners/android/core/libs",
                        "$psdkPublishingPath/ThirdParty/analytics/android/libs",
                        "$psdkPublishingPath/ThirdParty/analytics/android/ext/libs",
                        "$psdkPublishingPath/ThirdParty/analytics/android/libs",
                        "$psdkPublishingPath/ThirdParty/core/android",
                        "$psdkPublishingPath/ThirdParty/monitization/android/libs",
                        "$psdkPublishingPath/ThirdParty/monitization/android/core/libs",
                        "$psdkPublishingPath/ThirdParty/monitization/android/ext/libs",
                        "$psdkPublishingPath/ThirdParty/appsFlyer/android/libs",
                        "$psdkPublishingPath/ThirdParty/rewardedAds/android/core/libs",
                        "$psdkPublishingPath/ThirdParty/rewardedAds/android/ext/libs",
                        "$psdkPublishingPath/ThirdParty/crashTool/android/ext/libs",
			"$psdkPublishingPath/build_sym_links/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes",
                    	"$psdkPublishingPath/build_sym_links/Unity/Unity.app/Contents/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes",
                    	"$psdkPublishingPath/build_sym_links/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes",
                    	"$psdkPublishingPath/build_sym_links/Unity/Unity.app/Contents/PlaybackEngines/AndroidPlayer/release/bin"
                )
            }
        }
    }
}


